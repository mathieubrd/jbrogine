#version 330 core

in vec3 inVertex;
in vec2 inTexCoords;

out vec3 vLightVector;
out vec3 vVertexWorld;
out vec2 vTexCoords;
out vec3 vToCameraVector;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;
uniform float waveTime;
uniform vec3 lightPosition;

// Simplex 2D noise
//
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
void main() {
	vec3 vertex = inVertex;
	
	vertex.y = snoise(vec2(vertex.x, vertex.z));
	vertex.y = (vertex.y * sin(vertex.x + waveTime) * cos(vertex.z + waveTime)) / 1.5;
	
	// Calcul de la postion du sommet dans le repère universel
	vec4 vertexWorld = model * vec4(vertex, 1);

	// Position finale du sommet
	gl_Position = projection * view * vertexWorld;
	
	vVertexWorld = vertexWorld.xyz;
	
	// Calcul du vecteur entre le sommet et la lumière
	vLightVector = lightPosition - vertexWorld.xyz;
	
	// Calcul du vecteur entre le sommet et la camera
	vToCameraVector = (inverse(view) * vec4(0.0, 0.0, 0.0, 1)).xyz - vertexWorld.xyz;
	
	// Envoi des coordonnées de texture
	vTexCoords = inTexCoords;
}